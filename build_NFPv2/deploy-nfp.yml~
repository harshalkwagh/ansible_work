#                                                                                                                   
# One Convergence, Inc. CONFIDENTIAL                                                                                
# Copyright (c) 2012-2014, One Convergence, Inc., USA                                                               
# All Rights Reserved.                                                                                              
#                                                                                                                   
# All information contained herein is, and remains the property of                                                  
# One Convergence, Inc. and its suppliers, if any. The intellectual and                                             
# technical concepts contained herein are proprietary to One Convergence,                                           
# Inc. and its suppliers.                                                                                           
#                                                                                                                   
# Dissemination of this information or reproduction of this material is                                             
# strictly forbidden unless prior written permission is obtained from
# One Convergence, Inc., USA
#

########################################################################
#    Project: Ansible NSD Install                                      # 
#    Team/Authors:                                                     #                                            
#            Venkat Akkina [venkat.akkina@oneconvergence.com]          #                                            
#            Harshal Wagh  [harshal.wagh@oneconvergence.com]           #                                            
#            Deekshith Patnala [deekshith.patnala@oneconvergence.com]  #                                            
########################################################################    




---

- hosts: build
  sudo: true
  tasks:

  - block:
    - name: get timestamp
      shell: "date +%F_%T | tr : -"
      register: ts
    - set_fact: timestamp={{ts.stdout}}
    when: timestamp is not defined
  - debug: msg={{timestamp}}

- hosts: controller
  tasks:

    -
      set_fact: "build_server=\"{{groups['build'][0]}}\""
    -
      debug: "msg=\"{{build_server}}\""

    - block:

      - name: start orchestrator
        shell: python /usr/lib/python2.7/site-packages/gbpservice/contrib/nfp/tools/setup_nfp.py --enable-orchestrator
    
      - name: Configure service chain and NFP
        shell: python /usr/lib/python2.7/site-packages/gbpservice/contrib/nfp/tools/setup_nfp.py --configure

      -
        environment:
          OS_AUTH_URL: "http://{{ inventory_hostname }}:5000/v2.0"
          OS_PASSWORD: "{{os_password}}"
          OS_REGION_NAME: "{{os_region_name}}"
          OS_TENANT_NAME: "{{os_tenant_name}}"
          OS_USERNAME: "{{os_username}}"
        name: "check whether heat_stack_role is already added or not"
        register: res
        ignore_errors: True
        shell: "openstack user role list | grep neutron | grep -c heat_stack_owner"

      - debug: "msg=\"heat stack role is already added\""
        when: "res.rc != 1"

      -
        environment:
          OS_AUTH_URL: "http://{{ inventory_hostname }}:5000/v2.0"
          OS_PASSWORD: "{{os_password}}"
          OS_REGION_NAME: "{{os_region_name}}"
          OS_TENANT_NAME: "{{os_tenant_name}}"
          OS_USERNAME: "{{os_username}}"
        name: "add heat_stack_role"
        shell: "openstack role add --project services --user neutron heat_stack_owner"
        when: "res.rc == 1"

      -
        name: "create nfp resources"
        shell: "python /usr/lib/python2.7/site-packages/gbpservice/contrib/nfp/tools/setup_nfp.py --create-resources"

      -
        delegate_to: "{{build_server}}"
        synchronize: "src={{openstack_nfp_images_tar}} dest={{nfp_install_dir}}"


     
      -
        find: "paths={{nfp_install_dir}} patterns=\"*Openstack-nf-images*\" recurse=yes"
        name: Find the openstack-nfp-images tar rmp
        register: nfp_images_tar_path
      -
        debug: "msg={{nfp_images_tar_path.files[0].path}}"
      -
        args:
          chdir: "{{nfp_install_dir}}"
        name: Extract openstack-nfp-images tar
        shell: tar -xzvf {{nfp_images_tar_path.files[0].path}}

      -
        find: "paths={{nfp_install_dir}} patterns=\"*configurator*.qcow2\" recurse=yes"
        name: Find the nfp_configurator qcow image
        register: nfp_configurator
      -
        debug: msg={{nfp_configurator.files[0].path}}
      -
        args:
          chdir: "{{nfp_install_dir}}"
        name: "Launch NFP Configurator VM"
        shell: python /usr/lib/python2.7/site-packages/gbpservice/contrib/nfp/tools/setup_nfp.py --launch-controller --controller-path {{nfp_configurator.files[0].path}}

      -
        find: "paths={{nfp_install_dir}} patterns=*NFP_Packages* recurse=yes file_type=directory"
        name: Find the NFP-packages directory
        register: NFP_packages_path

      - debug: "msg={{NFP_packages_path.files[0].path}}"

      -
        args:
          chdir: "{{NFP_packages_path.files[0].path}}"
        name: Upload NFP Images to OpenStack glance
        shell: bash setup_nf_images.sh --operation=upload --vyos_path=service_images/vyos.qcow2 --haproxy_path=service_images/haproxy.qcow2


      -
        environment:
          OS_AUTH_URL: "http://{{ inventory_hostname }}:5000/v2.0"
          OS_PASSWORD: "{{os_password}}"
          OS_REGION_NAME: "{{os_region_name}}"
          OS_TENANT_NAME: "{{os_tenant_name}}"
          OS_USERNAME: "{{os_username}}"
        name: find configurator VM ip
        register: nfp_configurator_VM_ip
        shell: neutron port-list | grep controller | cut -d'"' -f8
      -
        debug: "msg={{nfp_configurator_VM_ip.stdout}}"
      -
        set_fact: configurator_ip={{ nfp_configurator_VM_ip.stdout }}
      -
        debug: msg={{configurator_ip}}

      when: deploy_nfp == 'true'      


- hosts: networknode
  tasks:

    - block:
      -
        name: enable nfp_proxy
        shell: python /usr/lib/python2.7/site-packages/gbpservice/contrib/nfp/tools/setup_nfp.py --enable-proxy

      -
        name: Update NFP Controller VM IP in /etc/nfp.ini file
        shell: crudini --set /etc/nfp.ini PROXY nfp_controller_ip {{hostvars[groups['controller'][0]]['configurator_ip'] }}

      -
        name: restart proxy services
        shell: systemctl restart nfp_proxy

#      - pause: seconds=100

      -
        name: test for configurator start
        shell: ip netns exec nfp-proxy telnet {{hostvars[groups['controller'][0]]['configurator_ip'] }} 8070 | grep "Connected to"
        register: configurator_up
        until: configurator_up.stdout_lines | length != 0
        retries: 5
        delay: 15

      -
        name: check for failure to exit
        when: configurator_up.stdout_lines | length == 0
        fail: msg="Proxy not reaching configurator"

      when: deploy_nfp == 'true'

